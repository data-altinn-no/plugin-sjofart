//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace Dan.Plugin.Sjofart.Nswag
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client
    {
#pragma warning disable 8618
        private string _baseUrl;
#pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://apimanager-common-prd.azure-api.net/vessel-search";
            _httpClient = httpClient;
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Search for vessels by register and/or name
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels
        /// </remarks>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="register">Filter on register</param>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>The list vessels matching search parameters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReservedVesselDto> GetReservedVesselNamesAsync(string vesselName, Register? register, int? offset, int? maxPerPage)
        {
            return GetReservedVesselNamesAsync(vesselName, register, offset, maxPerPage, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels by register and/or name
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels
        /// </remarks>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="register">Filter on register</param>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>The list vessels matching search parameters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReservedVesselDto> GetReservedVesselNamesAsync(string vesselName, Register? register, int? offset, int? maxPerPage, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/reserved"
                    urlBuilder_.Append("search/reserved");
                    urlBuilder_.Append('?');
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxPerPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MaxPerPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReservedVesselDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels with all current documents
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register2? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type? type, string legalEntityName, string legalEntityId, string roleType)
        {
            return GetVesselDataAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels with all current documents
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register2? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type? type, string legalEntityName, string legalEntityId, string roleType, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/vesseldata"
                    urlBuilder_.Append("search/vesseldata");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels filtered by establishment data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="homePort">Filter on vessel's home port</param>
        /// <param name="location">Filter on vessels construction location</param>
        /// <param name="fisheryNumber">Filter on fishery number</param>
        /// <param name="voluntaryRegistration">Filter on whether or not registration is voluntary (only relevant to vessels in NOR)</param>
        /// <param name="establishmentShipyard">Filter on vessels establishment construction shipyard</param>
        /// <param name="establishmentConstructionNumber">Filter on establishment construction number</param>
        /// <param name="previousVesselName">Filter on the previous vessel name</param>
        /// <param name="identificationNumber">Filter on CIN/WIN</param>
        /// <param name="smallCraftRegistryNumber">Filter on small craft registry number</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByEstablishmentAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register3? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type2? type, string legalEntityName, string legalEntityId, string roleType, string homePort, string location, string fisheryNumber, bool? voluntaryRegistration, string establishmentShipyard, string establishmentConstructionNumber, string previousVesselName, string identificationNumber, string smallCraftRegistryNumber)
        {
            return GetVesselDataByEstablishmentAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, homePort, location, fisheryNumber, voluntaryRegistration, establishmentShipyard, establishmentConstructionNumber, previousVesselName, identificationNumber, smallCraftRegistryNumber, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels filtered by establishment data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="homePort">Filter on vessel's home port</param>
        /// <param name="location">Filter on vessels construction location</param>
        /// <param name="fisheryNumber">Filter on fishery number</param>
        /// <param name="voluntaryRegistration">Filter on whether or not registration is voluntary (only relevant to vessels in NOR)</param>
        /// <param name="establishmentShipyard">Filter on vessels establishment construction shipyard</param>
        /// <param name="establishmentConstructionNumber">Filter on establishment construction number</param>
        /// <param name="previousVesselName">Filter on the previous vessel name</param>
        /// <param name="identificationNumber">Filter on CIN/WIN</param>
        /// <param name="smallCraftRegistryNumber">Filter on small craft registry number</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByEstablishmentAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register3? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type2? type, string legalEntityName, string legalEntityId, string roleType, string homePort, string location, string fisheryNumber, bool? voluntaryRegistration, string establishmentShipyard, string establishmentConstructionNumber, string previousVesselName, string identificationNumber, string smallCraftRegistryNumber, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/vesseldata/establishment"
                    urlBuilder_.Append("search/vesseldata/establishment");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homePort != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("HomePort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homePort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (location != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Location")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(location, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fisheryNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FisheryNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fisheryNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (voluntaryRegistration != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VoluntaryRegistration")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(voluntaryRegistration, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (establishmentShipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("EstablishmentShipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(establishmentShipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (establishmentConstructionNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("EstablishmentConstructionNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(establishmentConstructionNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (previousVesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PreviousVesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(previousVesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identificationNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("IdentificationNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identificationNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (smallCraftRegistryNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SmallCraftRegistryNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(smallCraftRegistryNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels filtered by technical data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="vesselType">Filter on vessel type</param>
        /// <param name="nISApprovedDate">Format - yyyy.MM.dd. Filter on NIS approved date (yyyy.MM.dd)</param>
        /// <param name="nISApprovedDateGreaterThan">Format - yyyy.MM.dd. Filter on NIS approved date after parameter (yyyy.MM.dd)</param>
        /// <param name="nISApprovedDateLessThan">Format - yyyy.MM.dd. Filter on NIS approved date before parameter (yyyy.MM.dd)</param>
        /// <param name="seaworthyDate">Format - yyyy.MM.dd. Filter on seaworthy date (yyyy.MM.dd)</param>
        /// <param name="seaworthyDateGreaterThan">Format - yyyy.MM.dd. Filter on seaworthy date after parameter (yyyy.MM.dd)</param>
        /// <param name="seaworthyDateLessThan">Format - yyyy.MM.dd. Filter on seaworthy date before parameter (yyyy.MM.dd)</param>
        /// <param name="length">Filter on length</param>
        /// <param name="lengthUnit">Filter on length unit (M/F)</param>
        /// <param name="width">Filter on width</param>
        /// <param name="widthUnit">Filter on width unit (M/F)</param>
        /// <param name="depth">Filter on depth</param>
        /// <param name="depthUnit">Filter on depth unit (M/F)</param>
        /// <param name="overallLength">Filter on overall length</param>
        /// <param name="overallLengthUnit">Filter on overall length unit (M/F)</param>
        /// <param name="grossTonnage">Filter on gross tonnage</param>
        /// <param name="netTonnage">Filter on net tonnage</param>
        /// <param name="ksGrossTonnage">Filter on o. gross tonnage</param>
        /// <param name="ksNetTonnage">Filter on o. net tonnage</param>
        /// <param name="deadweight">Filter on deadweight</param>
        /// <param name="lengthGreaterThan">Filter on length</param>
        /// <param name="lengthLessThan">Filter on length</param>
        /// <param name="overallLengthGreaterThan">Filter on overall length</param>
        /// <param name="overallLengthLessThan">Filter on overall length</param>
        /// <param name="widthGreaterThan">Filter on width</param>
        /// <param name="widthLessThan">Filter on width</param>
        /// <param name="depthGreaterThan">Filter on depth</param>
        /// <param name="depthLessThan">Filter on depth</param>
        /// <param name="grossTonnageGreaterThan">Filter on gross tonnage</param>
        /// <param name="grossTonnageLessThan">Filter on gross tonnage</param>
        /// <param name="netTonnageGreaterThan">Filter on net tonnage</param>
        /// <param name="netTonnageLessThan">Filter on net tonnage</param>
        /// <param name="deadweightGreaterThan">Filter on dead weight</param>
        /// <param name="deadweightLessThan">Filter on dead weight</param>
        /// <param name="ksGrossTonnageGreaterThan">Filter on ks gross tonnage</param>
        /// <param name="ksGrossTonnageLessThan">Filter on dead weight</param>
        /// <param name="ksNetTonnageGreaterThan">Filter on ks net tonnage</param>
        /// <param name="ksNetTonnageLessThan">Filter on ks net tonnage</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByTechnicalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register4? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type3? type, string legalEntityName, string legalEntityId, string roleType, string vesselType, string nISApprovedDate, string nISApprovedDateGreaterThan, string nISApprovedDateLessThan, string seaworthyDate, string seaworthyDateGreaterThan, string seaworthyDateLessThan, double? length, string lengthUnit, double? width, string widthUnit, double? depth, string depthUnit, double? overallLength, string overallLengthUnit, double? grossTonnage, double? netTonnage, double? ksGrossTonnage, double? ksNetTonnage, double? deadweight, double? lengthGreaterThan, double? lengthLessThan, double? overallLengthGreaterThan, double? overallLengthLessThan, double? widthGreaterThan, double? widthLessThan, double? depthGreaterThan, double? depthLessThan, double? grossTonnageGreaterThan, double? grossTonnageLessThan, double? netTonnageGreaterThan, double? netTonnageLessThan, double? deadweightGreaterThan, double? deadweightLessThan, double? ksGrossTonnageGreaterThan, double? ksGrossTonnageLessThan, double? ksNetTonnageGreaterThan, double? ksNetTonnageLessThan)
        {
            return GetVesselDataByTechnicalAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, vesselType, nISApprovedDate, nISApprovedDateGreaterThan, nISApprovedDateLessThan, seaworthyDate, seaworthyDateGreaterThan, seaworthyDateLessThan, length, lengthUnit, width, widthUnit, depth, depthUnit, overallLength, overallLengthUnit, grossTonnage, netTonnage, ksGrossTonnage, ksNetTonnage, deadweight, lengthGreaterThan, lengthLessThan, overallLengthGreaterThan, overallLengthLessThan, widthGreaterThan, widthLessThan, depthGreaterThan, depthLessThan, grossTonnageGreaterThan, grossTonnageLessThan, netTonnageGreaterThan, netTonnageLessThan, deadweightGreaterThan, deadweightLessThan, ksGrossTonnageGreaterThan, ksGrossTonnageLessThan, ksNetTonnageGreaterThan, ksNetTonnageLessThan, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels filtered by technical data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="vesselType">Filter on vessel type</param>
        /// <param name="nISApprovedDate">Format - yyyy.MM.dd. Filter on NIS approved date (yyyy.MM.dd)</param>
        /// <param name="nISApprovedDateGreaterThan">Format - yyyy.MM.dd. Filter on NIS approved date after parameter (yyyy.MM.dd)</param>
        /// <param name="nISApprovedDateLessThan">Format - yyyy.MM.dd. Filter on NIS approved date before parameter (yyyy.MM.dd)</param>
        /// <param name="seaworthyDate">Format - yyyy.MM.dd. Filter on seaworthy date (yyyy.MM.dd)</param>
        /// <param name="seaworthyDateGreaterThan">Format - yyyy.MM.dd. Filter on seaworthy date after parameter (yyyy.MM.dd)</param>
        /// <param name="seaworthyDateLessThan">Format - yyyy.MM.dd. Filter on seaworthy date before parameter (yyyy.MM.dd)</param>
        /// <param name="length">Filter on length</param>
        /// <param name="lengthUnit">Filter on length unit (M/F)</param>
        /// <param name="width">Filter on width</param>
        /// <param name="widthUnit">Filter on width unit (M/F)</param>
        /// <param name="depth">Filter on depth</param>
        /// <param name="depthUnit">Filter on depth unit (M/F)</param>
        /// <param name="overallLength">Filter on overall length</param>
        /// <param name="overallLengthUnit">Filter on overall length unit (M/F)</param>
        /// <param name="grossTonnage">Filter on gross tonnage</param>
        /// <param name="netTonnage">Filter on net tonnage</param>
        /// <param name="ksGrossTonnage">Filter on o. gross tonnage</param>
        /// <param name="ksNetTonnage">Filter on o. net tonnage</param>
        /// <param name="deadweight">Filter on deadweight</param>
        /// <param name="lengthGreaterThan">Filter on length</param>
        /// <param name="lengthLessThan">Filter on length</param>
        /// <param name="overallLengthGreaterThan">Filter on overall length</param>
        /// <param name="overallLengthLessThan">Filter on overall length</param>
        /// <param name="widthGreaterThan">Filter on width</param>
        /// <param name="widthLessThan">Filter on width</param>
        /// <param name="depthGreaterThan">Filter on depth</param>
        /// <param name="depthLessThan">Filter on depth</param>
        /// <param name="grossTonnageGreaterThan">Filter on gross tonnage</param>
        /// <param name="grossTonnageLessThan">Filter on gross tonnage</param>
        /// <param name="netTonnageGreaterThan">Filter on net tonnage</param>
        /// <param name="netTonnageLessThan">Filter on net tonnage</param>
        /// <param name="deadweightGreaterThan">Filter on dead weight</param>
        /// <param name="deadweightLessThan">Filter on dead weight</param>
        /// <param name="ksGrossTonnageGreaterThan">Filter on ks gross tonnage</param>
        /// <param name="ksGrossTonnageLessThan">Filter on dead weight</param>
        /// <param name="ksNetTonnageGreaterThan">Filter on ks net tonnage</param>
        /// <param name="ksNetTonnageLessThan">Filter on ks net tonnage</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByTechnicalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register4? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type3? type, string legalEntityName, string legalEntityId, string roleType, string vesselType, string nISApprovedDate, string nISApprovedDateGreaterThan, string nISApprovedDateLessThan, string seaworthyDate, string seaworthyDateGreaterThan, string seaworthyDateLessThan, double? length, string lengthUnit, double? width, string widthUnit, double? depth, string depthUnit, double? overallLength, string overallLengthUnit, double? grossTonnage, double? netTonnage, double? ksGrossTonnage, double? ksNetTonnage, double? deadweight, double? lengthGreaterThan, double? lengthLessThan, double? overallLengthGreaterThan, double? overallLengthLessThan, double? widthGreaterThan, double? widthLessThan, double? depthGreaterThan, double? depthLessThan, double? grossTonnageGreaterThan, double? grossTonnageLessThan, double? netTonnageGreaterThan, double? netTonnageLessThan, double? deadweightGreaterThan, double? deadweightLessThan, double? ksGrossTonnageGreaterThan, double? ksGrossTonnageLessThan, double? ksNetTonnageGreaterThan, double? ksNetTonnageLessThan, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/vesseldata/technical"
                    urlBuilder_.Append("search/vesseldata/technical");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nISApprovedDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NISApprovedDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nISApprovedDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nISApprovedDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NISApprovedDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nISApprovedDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nISApprovedDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NISApprovedDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nISApprovedDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seaworthyDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SeaworthyDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seaworthyDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seaworthyDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SeaworthyDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seaworthyDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seaworthyDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SeaworthyDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seaworthyDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (length != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Length")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lengthUnit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LengthUnit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lengthUnit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (width != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Width")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(width, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (widthUnit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("WidthUnit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(widthUnit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depth != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Depth")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depth, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depthUnit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DepthUnit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depthUnit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (overallLength != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("OverallLength")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(overallLength, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (overallLengthUnit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("OverallLengthUnit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(overallLengthUnit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (grossTonnage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("GrossTonnage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(grossTonnage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (netTonnage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NetTonnage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(netTonnage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksGrossTonnage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsGrossTonnage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksGrossTonnage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksNetTonnage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsNetTonnage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksNetTonnage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deadweight != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Deadweight")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deadweight, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lengthGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LengthGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lengthGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lengthLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LengthLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lengthLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (overallLengthGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("OverallLengthGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(overallLengthGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (overallLengthLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("OverallLengthLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(overallLengthLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (widthGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("WidthGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(widthGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (widthLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("WidthLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(widthLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depthGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DepthGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depthGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depthLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DepthLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depthLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (grossTonnageGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("GrossTonnageGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(grossTonnageGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (grossTonnageLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("GrossTonnageLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(grossTonnageLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (netTonnageGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NetTonnageGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(netTonnageGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (netTonnageLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NetTonnageLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(netTonnageLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deadweightGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DeadweightGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deadweightGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deadweightLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DeadweightLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deadweightLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksGrossTonnageGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsGrossTonnageGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksGrossTonnageGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksGrossTonnageLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsGrossTonnageLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksGrossTonnageLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksNetTonnageGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsNetTonnageGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksNetTonnageGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksNetTonnageLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsNetTonnageLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksNetTonnageLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels filtered by ownership data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="amount">Filter on amount</param>
        /// <param name="currency">Filter on currency</param>
        /// <param name="amountGreaterThan">Filter on amount value</param>
        /// <param name="amountLessThan">Filter on amount value</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByOwnershipAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register5? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type4? type, string legalEntityName, string legalEntityId, string roleType, double? amount, string currency, double? amountGreaterThan, double? amountLessThan)
        {
            return GetVesselDataByOwnershipAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, amount, currency, amountGreaterThan, amountLessThan, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels filtered by ownership data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="amount">Filter on amount</param>
        /// <param name="currency">Filter on currency</param>
        /// <param name="amountGreaterThan">Filter on amount value</param>
        /// <param name="amountLessThan">Filter on amount value</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByOwnershipAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register5? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type4? type, string legalEntityName, string legalEntityId, string roleType, double? amount, string currency, double? amountGreaterThan, double? amountLessThan, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/vesseldata/ownership"
                    urlBuilder_.Append("search/vesseldata/ownership");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amountGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AmountGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amountGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amountLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AmountLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amountLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels filtered by encumbrance data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="amount">Filter on encumbrance amount value</param>
        /// <param name="currency">Filter on currency</param>
        /// <param name="amountGreaterThan">Filter on encumbrance amount value</param>
        /// <param name="amountLessThan">Filter on encumbrance amount value</param>
        /// <param name="addOnAmount">Filter on encumbrance add on amount value</param>
        /// <param name="addOnAmountGreaterThan">Filter on encumbrance add on amount value</param>
        /// <param name="addOnAmountLessThan">Filter on encumbrance add on amount value</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByEncumbranceAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register6? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type5? type, string legalEntityName, string legalEntityId, string roleType, double? amount, string currency, double? amountGreaterThan, double? amountLessThan, double? addOnAmount, double? addOnAmountGreaterThan, double? addOnAmountLessThan)
        {
            return GetVesselDataByEncumbranceAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, amount, currency, amountGreaterThan, amountLessThan, addOnAmount, addOnAmountGreaterThan, addOnAmountLessThan, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels filtered by encumbrance data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="amount">Filter on encumbrance amount value</param>
        /// <param name="currency">Filter on currency</param>
        /// <param name="amountGreaterThan">Filter on encumbrance amount value</param>
        /// <param name="amountLessThan">Filter on encumbrance amount value</param>
        /// <param name="addOnAmount">Filter on encumbrance add on amount value</param>
        /// <param name="addOnAmountGreaterThan">Filter on encumbrance add on amount value</param>
        /// <param name="addOnAmountLessThan">Filter on encumbrance add on amount value</param>
        /// <returns>A list of vessels with current documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByEncumbranceAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register6? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type5? type, string legalEntityName, string legalEntityId, string roleType, double? amount, string currency, double? amountGreaterThan, double? amountLessThan, double? addOnAmount, double? addOnAmountGreaterThan, double? addOnAmountLessThan, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/vesseldata/encumbrance"
                    urlBuilder_.Append("search/vesseldata/encumbrance");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amountGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AmountGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amountGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amountLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AmountLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amountLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (addOnAmount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AddOnAmount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(addOnAmount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (addOnAmountGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AddOnAmountGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(addOnAmountGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (addOnAmountLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AddOnAmountLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(addOnAmountLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels with all current and historical documents
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register7? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type6? type, string legalEntityName, string legalEntityId, string roleType)
        {
            return GetVesselDataHistoricalAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels with all current and historical documents
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register7? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type6? type, string legalEntityName, string legalEntityId, string roleType, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/historicalvesseldata"
                    urlBuilder_.Append("search/historicalvesseldata");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels filtered by establishment data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current and historical documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="homePort">Filter on vessel's home port</param>
        /// <param name="location">Filter on vessels construction location</param>
        /// <param name="fisheryNumber">Filter on fishery number</param>
        /// <param name="voluntaryRegistration">Filter on whether or not registration is voluntary (only relevant to vessels in NOR)</param>
        /// <param name="establishmentShipyard">Filter on vessels establishment construction shipyard</param>
        /// <param name="establishmentConstructionNumber">Filter on establishment construction number</param>
        /// <param name="previousVesselName">Filter on the previous vessel name</param>
        /// <param name="identificationNumber">Filter on CIN/WIN</param>
        /// <param name="smallCraftRegistryNumber">Filter on small craft registry number</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByEstablishmentHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register8? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type7? type, string legalEntityName, string legalEntityId, string roleType, string homePort, string location, string fisheryNumber, bool? voluntaryRegistration, string establishmentShipyard, string establishmentConstructionNumber, string previousVesselName, string identificationNumber, string smallCraftRegistryNumber)
        {
            return GetVesselDataByEstablishmentHistoricalAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, homePort, location, fisheryNumber, voluntaryRegistration, establishmentShipyard, establishmentConstructionNumber, previousVesselName, identificationNumber, smallCraftRegistryNumber, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels filtered by establishment data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current and historical documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="homePort">Filter on vessel's home port</param>
        /// <param name="location">Filter on vessels construction location</param>
        /// <param name="fisheryNumber">Filter on fishery number</param>
        /// <param name="voluntaryRegistration">Filter on whether or not registration is voluntary (only relevant to vessels in NOR)</param>
        /// <param name="establishmentShipyard">Filter on vessels establishment construction shipyard</param>
        /// <param name="establishmentConstructionNumber">Filter on establishment construction number</param>
        /// <param name="previousVesselName">Filter on the previous vessel name</param>
        /// <param name="identificationNumber">Filter on CIN/WIN</param>
        /// <param name="smallCraftRegistryNumber">Filter on small craft registry number</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByEstablishmentHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register8? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type7? type, string legalEntityName, string legalEntityId, string roleType, string homePort, string location, string fisheryNumber, bool? voluntaryRegistration, string establishmentShipyard, string establishmentConstructionNumber, string previousVesselName, string identificationNumber, string smallCraftRegistryNumber, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/historicalvesseldata/establishment"
                    urlBuilder_.Append("search/historicalvesseldata/establishment");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homePort != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("HomePort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homePort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (location != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Location")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(location, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fisheryNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FisheryNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fisheryNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (voluntaryRegistration != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VoluntaryRegistration")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(voluntaryRegistration, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (establishmentShipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("EstablishmentShipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(establishmentShipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (establishmentConstructionNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("EstablishmentConstructionNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(establishmentConstructionNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (previousVesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PreviousVesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(previousVesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identificationNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("IdentificationNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identificationNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (smallCraftRegistryNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SmallCraftRegistryNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(smallCraftRegistryNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels filtered by technical data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current and historical documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="vesselType">Filter on vessel type</param>
        /// <param name="nISApprovedDate">Format - yyyy.MM.dd. Filter on NIS approved date (yyyy.MM.dd)</param>
        /// <param name="nISApprovedDateGreaterThan">Format - yyyy.MM.dd. Filter on NIS approved date after parameter (yyyy.MM.dd)</param>
        /// <param name="nISApprovedDateLessThan">Format - yyyy.MM.dd. Filter on NIS approved date before parameter (yyyy.MM.dd)</param>
        /// <param name="seaworthyDate">Format - yyyy.MM.dd. Filter on seaworthy date (yyyy.MM.dd)</param>
        /// <param name="seaworthyDateGreaterThan">Format - yyyy.MM.dd. Filter on seaworthy date after parameter (yyyy.MM.dd)</param>
        /// <param name="seaworthyDateLessThan">Format - yyyy.MM.dd. Filter on seaworthy date before parameter (yyyy.MM.dd)</param>
        /// <param name="length">Filter on length</param>
        /// <param name="lengthUnit">Filter on length unit (M/F)</param>
        /// <param name="width">Filter on width</param>
        /// <param name="widthUnit">Filter on width unit (M/F)</param>
        /// <param name="depth">Filter on depth</param>
        /// <param name="depthUnit">Filter on depth unit (M/F)</param>
        /// <param name="overallLength">Filter on overall length</param>
        /// <param name="overallLengthUnit">Filter on overall length unit (M/F)</param>
        /// <param name="grossTonnage">Filter on gross tonnage</param>
        /// <param name="netTonnage">Filter on net tonnage</param>
        /// <param name="ksGrossTonnage">Filter on o. gross tonnage</param>
        /// <param name="ksNetTonnage">Filter on o. net tonnage</param>
        /// <param name="deadweight">Filter on deadweight</param>
        /// <param name="lengthGreaterThan">Filter on length</param>
        /// <param name="lengthLessThan">Filter on length</param>
        /// <param name="overallLengthGreaterThan">Filter on overall length</param>
        /// <param name="overallLengthLessThan">Filter on overall length</param>
        /// <param name="widthGreaterThan">Filter on width</param>
        /// <param name="widthLessThan">Filter on width</param>
        /// <param name="depthGreaterThan">Filter on depth</param>
        /// <param name="depthLessThan">Filter on depth</param>
        /// <param name="grossTonnageGreaterThan">Filter on gross tonnage</param>
        /// <param name="grossTonnageLessThan">Filter on gross tonnage</param>
        /// <param name="netTonnageGreaterThan">Filter on net tonnage</param>
        /// <param name="netTonnageLessThan">Filter on net tonnage</param>
        /// <param name="deadweightGreaterThan">Filter on dead weight</param>
        /// <param name="deadweightLessThan">Filter on dead weight</param>
        /// <param name="ksGrossTonnageGreaterThan">Filter on ks gross tonnage</param>
        /// <param name="ksGrossTonnageLessThan">Filter on dead weight</param>
        /// <param name="ksNetTonnageGreaterThan">Filter on ks net tonnage</param>
        /// <param name="ksNetTonnageLessThan">Filter on ks net tonnage</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByTechnicalHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register9? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type8? type, string legalEntityName, string legalEntityId, string roleType, string vesselType, string nISApprovedDate, string nISApprovedDateGreaterThan, string nISApprovedDateLessThan, string seaworthyDate, string seaworthyDateGreaterThan, string seaworthyDateLessThan, double? length, string lengthUnit, double? width, string widthUnit, double? depth, string depthUnit, double? overallLength, string overallLengthUnit, double? grossTonnage, double? netTonnage, double? ksGrossTonnage, double? ksNetTonnage, double? deadweight, double? lengthGreaterThan, double? lengthLessThan, double? overallLengthGreaterThan, double? overallLengthLessThan, double? widthGreaterThan, double? widthLessThan, double? depthGreaterThan, double? depthLessThan, double? grossTonnageGreaterThan, double? grossTonnageLessThan, double? netTonnageGreaterThan, double? netTonnageLessThan, double? deadweightGreaterThan, double? deadweightLessThan, double? ksGrossTonnageGreaterThan, double? ksGrossTonnageLessThan, double? ksNetTonnageGreaterThan, double? ksNetTonnageLessThan)
        {
            return GetVesselDataByTechnicalHistoricalAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, vesselType, nISApprovedDate, nISApprovedDateGreaterThan, nISApprovedDateLessThan, seaworthyDate, seaworthyDateGreaterThan, seaworthyDateLessThan, length, lengthUnit, width, widthUnit, depth, depthUnit, overallLength, overallLengthUnit, grossTonnage, netTonnage, ksGrossTonnage, ksNetTonnage, deadweight, lengthGreaterThan, lengthLessThan, overallLengthGreaterThan, overallLengthLessThan, widthGreaterThan, widthLessThan, depthGreaterThan, depthLessThan, grossTonnageGreaterThan, grossTonnageLessThan, netTonnageGreaterThan, netTonnageLessThan, deadweightGreaterThan, deadweightLessThan, ksGrossTonnageGreaterThan, ksGrossTonnageLessThan, ksNetTonnageGreaterThan, ksNetTonnageLessThan, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels filtered by technical data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current and historical documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="vesselType">Filter on vessel type</param>
        /// <param name="nISApprovedDate">Format - yyyy.MM.dd. Filter on NIS approved date (yyyy.MM.dd)</param>
        /// <param name="nISApprovedDateGreaterThan">Format - yyyy.MM.dd. Filter on NIS approved date after parameter (yyyy.MM.dd)</param>
        /// <param name="nISApprovedDateLessThan">Format - yyyy.MM.dd. Filter on NIS approved date before parameter (yyyy.MM.dd)</param>
        /// <param name="seaworthyDate">Format - yyyy.MM.dd. Filter on seaworthy date (yyyy.MM.dd)</param>
        /// <param name="seaworthyDateGreaterThan">Format - yyyy.MM.dd. Filter on seaworthy date after parameter (yyyy.MM.dd)</param>
        /// <param name="seaworthyDateLessThan">Format - yyyy.MM.dd. Filter on seaworthy date before parameter (yyyy.MM.dd)</param>
        /// <param name="length">Filter on length</param>
        /// <param name="lengthUnit">Filter on length unit (M/F)</param>
        /// <param name="width">Filter on width</param>
        /// <param name="widthUnit">Filter on width unit (M/F)</param>
        /// <param name="depth">Filter on depth</param>
        /// <param name="depthUnit">Filter on depth unit (M/F)</param>
        /// <param name="overallLength">Filter on overall length</param>
        /// <param name="overallLengthUnit">Filter on overall length unit (M/F)</param>
        /// <param name="grossTonnage">Filter on gross tonnage</param>
        /// <param name="netTonnage">Filter on net tonnage</param>
        /// <param name="ksGrossTonnage">Filter on o. gross tonnage</param>
        /// <param name="ksNetTonnage">Filter on o. net tonnage</param>
        /// <param name="deadweight">Filter on deadweight</param>
        /// <param name="lengthGreaterThan">Filter on length</param>
        /// <param name="lengthLessThan">Filter on length</param>
        /// <param name="overallLengthGreaterThan">Filter on overall length</param>
        /// <param name="overallLengthLessThan">Filter on overall length</param>
        /// <param name="widthGreaterThan">Filter on width</param>
        /// <param name="widthLessThan">Filter on width</param>
        /// <param name="depthGreaterThan">Filter on depth</param>
        /// <param name="depthLessThan">Filter on depth</param>
        /// <param name="grossTonnageGreaterThan">Filter on gross tonnage</param>
        /// <param name="grossTonnageLessThan">Filter on gross tonnage</param>
        /// <param name="netTonnageGreaterThan">Filter on net tonnage</param>
        /// <param name="netTonnageLessThan">Filter on net tonnage</param>
        /// <param name="deadweightGreaterThan">Filter on dead weight</param>
        /// <param name="deadweightLessThan">Filter on dead weight</param>
        /// <param name="ksGrossTonnageGreaterThan">Filter on ks gross tonnage</param>
        /// <param name="ksGrossTonnageLessThan">Filter on dead weight</param>
        /// <param name="ksNetTonnageGreaterThan">Filter on ks net tonnage</param>
        /// <param name="ksNetTonnageLessThan">Filter on ks net tonnage</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByTechnicalHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register9? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type8? type, string legalEntityName, string legalEntityId, string roleType, string vesselType, string nISApprovedDate, string nISApprovedDateGreaterThan, string nISApprovedDateLessThan, string seaworthyDate, string seaworthyDateGreaterThan, string seaworthyDateLessThan, double? length, string lengthUnit, double? width, string widthUnit, double? depth, string depthUnit, double? overallLength, string overallLengthUnit, double? grossTonnage, double? netTonnage, double? ksGrossTonnage, double? ksNetTonnage, double? deadweight, double? lengthGreaterThan, double? lengthLessThan, double? overallLengthGreaterThan, double? overallLengthLessThan, double? widthGreaterThan, double? widthLessThan, double? depthGreaterThan, double? depthLessThan, double? grossTonnageGreaterThan, double? grossTonnageLessThan, double? netTonnageGreaterThan, double? netTonnageLessThan, double? deadweightGreaterThan, double? deadweightLessThan, double? ksGrossTonnageGreaterThan, double? ksGrossTonnageLessThan, double? ksNetTonnageGreaterThan, double? ksNetTonnageLessThan, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/historicalvesseldata/technical"
                    urlBuilder_.Append("search/historicalvesseldata/technical");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nISApprovedDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NISApprovedDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nISApprovedDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nISApprovedDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NISApprovedDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nISApprovedDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nISApprovedDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NISApprovedDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nISApprovedDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seaworthyDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SeaworthyDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seaworthyDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seaworthyDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SeaworthyDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seaworthyDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seaworthyDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SeaworthyDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seaworthyDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (length != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Length")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lengthUnit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LengthUnit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lengthUnit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (width != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Width")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(width, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (widthUnit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("WidthUnit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(widthUnit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depth != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Depth")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depth, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depthUnit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DepthUnit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depthUnit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (overallLength != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("OverallLength")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(overallLength, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (overallLengthUnit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("OverallLengthUnit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(overallLengthUnit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (grossTonnage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("GrossTonnage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(grossTonnage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (netTonnage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NetTonnage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(netTonnage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksGrossTonnage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsGrossTonnage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksGrossTonnage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksNetTonnage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsNetTonnage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksNetTonnage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deadweight != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Deadweight")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deadweight, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lengthGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LengthGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lengthGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lengthLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LengthLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lengthLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (overallLengthGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("OverallLengthGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(overallLengthGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (overallLengthLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("OverallLengthLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(overallLengthLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (widthGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("WidthGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(widthGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (widthLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("WidthLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(widthLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depthGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DepthGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depthGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depthLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DepthLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depthLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (grossTonnageGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("GrossTonnageGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(grossTonnageGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (grossTonnageLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("GrossTonnageLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(grossTonnageLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (netTonnageGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NetTonnageGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(netTonnageGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (netTonnageLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("NetTonnageLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(netTonnageLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deadweightGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DeadweightGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deadweightGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deadweightLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DeadweightLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deadweightLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksGrossTonnageGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsGrossTonnageGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksGrossTonnageGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksGrossTonnageLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsGrossTonnageLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksGrossTonnageLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksNetTonnageGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsNetTonnageGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksNetTonnageGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ksNetTonnageLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("KsNetTonnageLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ksNetTonnageLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels filtered by ownership data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current and historical documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="amount">Filter on amount</param>
        /// <param name="currency">Filter on currency</param>
        /// <param name="amountGreaterThan">Filter on amount value</param>
        /// <param name="amountLessThan">Filter on amount value</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByOwnershipHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register10? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type9? type, string legalEntityName, string legalEntityId, string roleType, double? amount, string currency, double? amountGreaterThan, double? amountLessThan)
        {
            return GetVesselDataByOwnershipHistoricalAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, amount, currency, amountGreaterThan, amountLessThan, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels filtered by ownership data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current and historical documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="amount">Filter on amount</param>
        /// <param name="currency">Filter on currency</param>
        /// <param name="amountGreaterThan">Filter on amount value</param>
        /// <param name="amountLessThan">Filter on amount value</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByOwnershipHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register10? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type9? type, string legalEntityName, string legalEntityId, string roleType, double? amount, string currency, double? amountGreaterThan, double? amountLessThan, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/historicalvesseldata/ownership"
                    urlBuilder_.Append("search/historicalvesseldata/ownership");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amountGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AmountGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amountGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amountLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AmountLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amountLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessels filtered by encumbrance data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current and historical documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="amount">Filter on encumbrance amount value</param>
        /// <param name="currency">Filter on currency</param>
        /// <param name="amountGreaterThan">Filter on encumbrance amount value</param>
        /// <param name="amountLessThan">Filter on encumbrance amount value</param>
        /// <param name="addOnAmount">Filter on encumbrance add on amount value</param>
        /// <param name="addOnAmountGreaterThan">Filter on encumbrance add on amount value</param>
        /// <param name="addOnAmountLessThan">Filter on encumbrance add on amount value</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByEncumbranceHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register11? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type10? type, string legalEntityName, string legalEntityId, string roleType, double? amount, string currency, double? amountGreaterThan, double? amountLessThan, double? addOnAmount, double? addOnAmountGreaterThan, double? addOnAmountLessThan)
        {
            return GetVesselDataByEncumbranceHistoricalAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, register, journalNumber, journalNumberGreaterThan, journalNumberLessThan, journalDate, journalDateGreaterThan, journalDateLessThan, conferred, type, legalEntityName, legalEntityId, roleType, amount, currency, amountGreaterThan, amountLessThan, addOnAmount, addOnAmountGreaterThan, addOnAmountLessThan, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessels filtered by encumbrance data
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with current and historical documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="journalNumber">Filter on internal archive reference for document</param>
        /// <param name="journalNumberGreaterThan">Filter on journal number</param>
        /// <param name="journalNumberLessThan">Filter on journal number</param>
        /// <param name="journalDate">Format - yyyy.MM.dd. Filter on journal date (yyyy.MM.dd)</param>
        /// <param name="journalDateGreaterThan">Format - yyyy.MM.dd. Filter on journal date after parameter (yyyy.MM.dd)</param>
        /// <param name="journalDateLessThan">Format - yyyy.MM.dd. Filter on journal date before parameter (yyyy.MM.dd)</param>
        /// <param name="conferred">QA step indicating that the document has been conferred (unconferred documents are pending secondary verification)</param>
        /// <param name="type">Filter on document class</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="amount">Filter on encumbrance amount value</param>
        /// <param name="currency">Filter on currency</param>
        /// <param name="amountGreaterThan">Filter on encumbrance amount value</param>
        /// <param name="amountLessThan">Filter on encumbrance amount value</param>
        /// <param name="addOnAmount">Filter on encumbrance add on amount value</param>
        /// <param name="addOnAmountGreaterThan">Filter on encumbrance add on amount value</param>
        /// <param name="addOnAmountLessThan">Filter on encumbrance add on amount value</param>
        /// <returns>A list of vessels with current and historical documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselDataDto> GetVesselDataByEncumbranceHistoricalAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, Register11? register, int? journalNumber, int? journalNumberGreaterThan, int? journalNumberLessThan, string journalDate, string journalDateGreaterThan, string journalDateLessThan, bool? conferred, Type10? type, string legalEntityName, string legalEntityId, string roleType, double? amount, string currency, double? amountGreaterThan, double? amountLessThan, double? addOnAmount, double? addOnAmountGreaterThan, double? addOnAmountLessThan, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/historicalvesseldata/encumbrance"
                    urlBuilder_.Append("search/historicalvesseldata/encumbrance");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalNumberLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalNumberLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalNumberLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (journalDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JournalDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(journalDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (conferred != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Conferred")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(conferred, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amountGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AmountGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amountGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amountLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AmountLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amountLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (addOnAmount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AddOnAmount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(addOnAmount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (addOnAmountGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AddOnAmountGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(addOnAmountGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (addOnAmountLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("AddOnAmountLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(addOnAmountLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get vessel owners
        /// </summary>
        /// <remarks>
        /// Get list of vessel owners
        /// </remarks>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>A list of vessel owners</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OwnerDto> GetVesselOwnerAsync(int? offset, int? maxPerPage)
        {
            return GetVesselOwnerAsync(offset, maxPerPage, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get vessel owners
        /// </summary>
        /// <remarks>
        /// Get list of vessel owners
        /// </remarks>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>A list of vessel owners</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OwnerDto> GetVesselOwnerAsync(int? offset, int? maxPerPage, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/owner"
                    urlBuilder_.Append("search/owner");
                    urlBuilder_.Append('?');
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxPerPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MaxPerPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OwnerDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessel information by various parameters
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="constructionNumber">Filter on construction number</param>
        /// <param name="register">Filter on register</param>
        /// <param name="identificationNumber">Filter on IdentificationNumber</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>The list of vessels matching search parameters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VesselListDto> GetVesselListAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, string constructionNumber, Register12? register, string identificationNumber, string legalEntityName, string legalEntityId, string roleType, int? offset, int? maxPerPage)
        {
            return GetVesselListAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, vesselName, shipyard, constructionNumber, register, identificationNumber, legalEntityName, legalEntityId, roleType, offset, maxPerPage, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessel information by various parameters
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number</param>
        /// <param name="imoLessThan">Filter on IMO-numbers</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="shipyard">Filter on Shipyard</param>
        /// <param name="constructionNumber">Filter on construction number</param>
        /// <param name="register">Filter on register</param>
        /// <param name="identificationNumber">Filter on IdentificationNumber</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>The list of vessels matching search parameters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VesselListDto> GetVesselListAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string vesselName, string shipyard, string constructionNumber, Register12? register, string identificationNumber, string legalEntityName, string legalEntityId, string roleType, int? offset, int? maxPerPage, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/vessellist"
                    urlBuilder_.Append("search/vessellist");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (constructionNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ConstructionNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(constructionNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identificationNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("IdentificationNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identificationNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxPerPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MaxPerPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VesselListDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for vessel information by various parameters
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels that were active at a given date
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="activeAtDate">Format - yyyy.MM.dd. Filter on when the vessel was active (yyyy.MM.dd)</param>
        /// <param name="shipyard">Filter on vessels construction shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>The list vessels matching search parameters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActiveVesselDataDto> GetActiveVesselDataAsync(int? vesselId, string callSign, int? imo, string vesselName, string activeAtDate, string shipyard, Register13? register, int? offset, int? maxPerPage)
        {
            return GetActiveVesselDataAsync(vesselId, callSign, imo, vesselName, activeAtDate, shipyard, register, offset, maxPerPage, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for vessel information by various parameters
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels that were active at a given date
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="activeAtDate">Format - yyyy.MM.dd. Filter on when the vessel was active (yyyy.MM.dd)</param>
        /// <param name="shipyard">Filter on vessels construction shipyard</param>
        /// <param name="register">Filter on register</param>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>The list vessels matching search parameters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActiveVesselDataDto> GetActiveVesselDataAsync(int? vesselId, string callSign, int? imo, string vesselName, string activeAtDate, string shipyard, Register13? register, int? offset, int? maxPerPage, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/activevessels"
                    urlBuilder_.Append("search/activevessels");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (activeAtDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ActiveAtDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeAtDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shipyard != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Shipyard")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipyard, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxPerPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MaxPerPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActiveVesselDataDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for certificates
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with certificate documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number greater than parameter</param>
        /// <param name="imoLessThan">Filter on IMO-numbers less than parameter</param>
        /// <param name="deleteDate">Format - yyyy.MM.dd. Filter on certificates deleted on date (yyyy.MM.dd)</param>
        /// <param name="deleteDateGreaterThan">Format - yyyy.MM.dd. Filter on certificates deleted after date (yyyy.MM.dd)</param>
        /// <param name="deleteDateLessThan">Format - yyyy.MM.dd. Filter on certificates deleted before date (yyyy.MM.dd)</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="register">Filter on register</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>A list of vessels with certificate documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CsrVesselDto> GetCsrSearchAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string deleteDate, string deleteDateGreaterThan, string deleteDateLessThan, string vesselName, Register14? register, string legalEntityName, string legalEntityId, string roleType, int? offset, int? maxPerPage)
        {
            return GetCsrSearchAsync(vesselId, callSign, imo, imoGreaterThan, imoLessThan, deleteDate, deleteDateGreaterThan, deleteDateLessThan, vesselName, register, legalEntityName, legalEntityId, roleType, offset, maxPerPage, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for certificates
        /// </summary>
        /// <remarks>
        /// Returns a list of vessels with certificate documents
        /// </remarks>
        /// <param name="vesselId">Filter on vessel id</param>
        /// <param name="callSign">Filter on vessel call sign</param>
        /// <param name="imo">Filter on International Maritime Organization (IMO) number</param>
        /// <param name="imoGreaterThan">Filter on IMO-number greater than parameter</param>
        /// <param name="imoLessThan">Filter on IMO-numbers less than parameter</param>
        /// <param name="deleteDate">Format - yyyy.MM.dd. Filter on certificates deleted on date (yyyy.MM.dd)</param>
        /// <param name="deleteDateGreaterThan">Format - yyyy.MM.dd. Filter on certificates deleted after date (yyyy.MM.dd)</param>
        /// <param name="deleteDateLessThan">Format - yyyy.MM.dd. Filter on certificates deleted before date (yyyy.MM.dd)</param>
        /// <param name="vesselName">Filter on vessel name</param>
        /// <param name="register">Filter on register</param>
        /// <param name="legalEntityName">Filter on legal entity name</param>
        /// <param name="legalEntityId">Filter on legal entity id</param>
        /// <param name="roleType">Filter on role type</param>
        /// <param name="offset">How many pages to skip</param>
        /// <param name="maxPerPage">Items per page</param>
        /// <returns>A list of vessels with certificate documents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CsrVesselDto> GetCsrSearchAsync(int? vesselId, string callSign, int? imo, int? imoGreaterThan, int? imoLessThan, string deleteDate, string deleteDateGreaterThan, string deleteDateLessThan, string vesselName, Register14? register, string legalEntityName, string legalEntityId, string roleType, int? offset, int? maxPerPage, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/csr"
                    urlBuilder_.Append("search/csr");
                    urlBuilder_.Append('?');
                    if (vesselId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (callSign != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CallSign")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(callSign, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Imo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (imoLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ImoLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(imoLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deleteDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DeleteDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deleteDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deleteDateGreaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DeleteDateGreaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deleteDateGreaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deleteDateLessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DeleteDateLessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deleteDateLessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vesselName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("VesselName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vesselName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (register != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Register")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(register, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (legalEntityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LegalEntityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(legalEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (roleType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RoleType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(roleType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxPerPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MaxPerPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CsrVesselDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ISrDocumentDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservedVesselDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegalEntityDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SrMeasurementDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TechnicalDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VesselDataDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EncumbranceDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EstablishmentDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConstructionDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EncumbranceAmountDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnershipDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitValue
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Decimal
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nullable
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnerDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VesselListDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActiveVesselDataDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CsrVesselDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CsrRoleSearchParams
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CsrDocumentDto
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Encumbrance")]
        Encumbrance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Establishment")]
        Establishment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ownership")]
        Ownership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIS")]
        NIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BYGG")]
        BYGG = 2,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
